-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.album
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name text COLLATE pg_catalog."default" NOT NULL,
    cover text COLLATE pg_catalog."default" NOT NULL,
    summary text COLLATE pg_catalog."default",
    duration integer,
    format text COLLATE pg_catalog."default",
    release_year smallint NOT NULL,
    colour text COLLATE pg_catalog."default" DEFAULT 'black'::text,
    quantity integer DEFAULT 0,
    price numeric(5, 2),
    band_name text COLLATE pg_catalog."default" NOT NULL,
    label_name text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT album_pkey PRIMARY KEY (id),
    CONSTRAINT album_cover_release_year_colour_key UNIQUE (cover, release_year, colour),
    CONSTRAINT album_name_band_name_colour_key UNIQUE (name, band_name, colour)
);

CREATE TABLE IF NOT EXISTS public.album_genre
(
    album_id integer NOT NULL,
    genre_id integer NOT NULL,
    CONSTRAINT album_genre_pkey PRIMARY KEY (album_id, genre_id)
);

CREATE TABLE IF NOT EXISTS public.band
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name text COLLATE pg_catalog."default" NOT NULL,
    country text COLLATE pg_catalog."default",
    CONSTRAINT band_pkey PRIMARY KEY (id),
    CONSTRAINT band_name_key UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.cart
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    cart_no integer,
    user_id integer,
    album_id integer,
    CONSTRAINT cart_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.db_user
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    f_name text COLLATE pg_catalog."default" NOT NULL,
    l_name text COLLATE pg_catalog."default" NOT NULL,
    email text COLLATE pg_catalog."default" NOT NULL,
    password_hash text COLLATE pg_catalog."default" NOT NULL,
    house_number integer,
    street_name text COLLATE pg_catalog."default",
    city text COLLATE pg_catalog."default",
    country text COLLATE pg_catalog."default",
    is_admin boolean DEFAULT false,
    is_contributor boolean DEFAULT false,
    CONSTRAINT db_user_pkey PRIMARY KEY (id),
    CONSTRAINT db_user_email_key UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS public.genre
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT genre_pkey PRIMARY KEY (id),
    CONSTRAINT genre_name_key UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.label
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT label_pkey PRIMARY KEY (id),
    CONSTRAINT label_name_key UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.purchase
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    total numeric(5, 2),
    placed_on timestamp without time zone NOT NULL DEFAULT now(),
    fulfilled_on timestamp without time zone,
    cart_no integer NOT NULL,
    user_id integer,
    CONSTRAINT purchase_pkey PRIMARY KEY (id),
    CONSTRAINT purchase_cart_no_user_id_key UNIQUE (cart_no, user_id)
);

ALTER TABLE IF EXISTS public.album
    ADD CONSTRAINT band_name_fk FOREIGN KEY (band_name)
    REFERENCES public.band (name) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.album
    ADD CONSTRAINT label_name_fk FOREIGN KEY (label_name)
    REFERENCES public.label (name) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.album_genre
    ADD CONSTRAINT album_genre_album_id_fkey FOREIGN KEY (album_id)
    REFERENCES public.album (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.album_genre
    ADD CONSTRAINT album_genre_genre_id_fkey FOREIGN KEY (genre_id)
    REFERENCES public.genre (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.cart
    ADD CONSTRAINT cart_album_id_fkey FOREIGN KEY (album_id)
    REFERENCES public.album (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.cart
    ADD CONSTRAINT cart_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.db_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.purchase
    ADD CONSTRAINT purchase_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.db_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;